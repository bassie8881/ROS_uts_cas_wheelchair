<launch>
	<!-- vim: ft=xml -->

	<!-- delay the start of the launch so udev finalises all the devices -->
	<!-- <node pkg="data_recorder" type="timed_roslaunch.sh" name="timed_roslaunch" output="screen" args="5"> </node> -->

	<!-- Start each of the primary sensor nodes, if any fail should not start the main program -->

	<!-- IO Expansion board - currently removed -->
	<!-- <node pkg="io_expander" type="io_expander_node" name="io_expander" clear_params="true" output="screen"> </node> -->

	<!-- arduino rosserial connection -->
	<node pkg="rosserial_python" type="serial_node.py" name="rosserial_arduino" output="screen">
		<param name="port" type="string" value="/dev/sb/io" />
	</node>

	<!-- IMU board -->
	<node pkg="myahrs_plus_imu" type="myahrs_plus_imu_node" name="myahrs_imu" clear_params="true" output="screen"> </node>

	<!-- Hokuyo Laser Scanner primary (used for localisation) -->
	<node pkg="hokuyo_node" type="hokuyo_node" name="laser_lsl">
		<param name="port" type="string" value="/dev/sb/ls_H0902981" />	
		<param name="frame_id" type="string" value="laser_lsl" />
		<remap from="/scan" to="/scan_lsl"/>
	</node>

	<!-- Hokuyo Laser Scanner primary (used for localisation) -->
	<node pkg="hokuyo_node" type="hokuyo_node" name="laser_lsm">
		<param name="port" type="string" value="/dev/sb/ls_H1002771" />	
		<param name="frame_id" type="string" value="laser_lsm" />
		<remap from="/scan" to="/scan_lsm"/>
	</node>
	
	<!-- Camera node Firefly -->
	<!-- <include file="$(find pointgrey_camera_driver)/launch/camera.launch"/> -->

	 <!-- Determine this using rosrun pointgrey_camera_driver list_cameras.
       		If not specified, defaults to first camera found. -->
	  <arg name="camera_serial" default="14317006" />
	  <arg name="calibrated" default="0" />

	  <group ns="camera">
	    <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

	    <node pkg="nodelet" type="nodelet" name="camera_nodelet"
        	  args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
	      <param name="frame_id" value="camera" />
	      <param name="serial" value="$(arg camera_serial)" />

	      <!-- When unspecified, the driver will use the default framerate as given by the
        	   camera itself. Use this parameter to override that value for cameras capable of
	           other framerates. -->
	      <param name="frame_rate" value="10" />
      
	      <!-- Use the camera_calibration package to create this file -->
	      <param name="camera_info_url" if="$(arg calibrated)"
        	     value="file://$(env HOME)/.ros/camera_info/$(arg camera_serial).yaml" />
	    </node>

	    <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
	          args="load image_proc/debayer camera_nodelet_manager">
	    </node>
	  </group>


	<!-- Launch tf node - need to confirm the yaw, pitch and roll values -->
	<!-- Transform for reference_point to laser scanner 1 - lsl -->
	<!-- 0.035 0 0.085 Format of args x, y, z, yaw, pitch, roll -->
	<node pkg="tf" type="static_transform_publisher" name="tf_base_laser_lsl"
	args="-0.035 0 0.085 0 0 0 base laser_lsl 100" />
	<node pkg="tf" type="static_transform_publisher" name="tf_base_laser_lsm"
	args="-0.035 -0.085 0 -1.57 0 -1.57 base laser_lsm 100" />
	<node pkg="tf" type="static_transform_publisher" name="tf_base_imu"
	args="-0.08 0.065 0.03 -1.57 0 0 base imu 100" />

	<!-- Start the data recorder node -->
	<node pkg="data_recorder" type="data_recorder_node" name="data_recorder" respawn="false" clear_params="true" output="screen"> </node>

</launch>
