controller_frequency: 5.0
recovery_behaviour_enabled: true

NavfnROS:
  allow_unknown: false
  default_tolerance: 0.1

TrajectoryPlannerROS:
  #Robot Configuration Parameters
  acc_lim_x: 0.1 #(double, default: 2.5) The x acceleration limit of the robot in meters/sec^2 
  acc_lim_y: 0.1 #(double, default: 2.5) The y acceleration limit of the robot in meters/sec^2 
  acc_lim_theta: 0.1 #(double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2 

  max_vel_x: 0.1 #(double, default: 0.5) The maximum forward velocity allowed for the base in meters/sec 
  min_vel_x: 0.05 #(double, default: 0.1) The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction. 
  max_vel_y: 0.1
  min_vel_y: 0.1

  max_vel_theta: 1.0 #(double, default: 1.0) The maximum rotational velocity allowed for the base in radians/sec 
  min_vel_theta: -1.0 #(double, default: -1.0) The minimum rotational velocity allowed for the base in radians/sec 
  min_in_place_vel_theta: 0.2 #(double, default: 0.4) The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec 

  backup_vel: -0.1 #(double, default: -0.1) DEPRECATED (use escape_vel):Speed used for backing up during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape. 
  escape_vel: -0.1 #(double, default: -0.1) Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape. New in navigation 1.3.1

  holonomic_robot: false #(bool, default: true) Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued. 

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1 #(double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal 
  xy_goal_tolerance: 0.2 #(double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal 
  latch_xy_goal_tolerance: false #(bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so

  # Forward Simulation Parameters
  sim_time: 2.0 #(double, default: 1.0) The amount of time to forward-simulate trajectories in seconds 
  sim_granularity: 0.02 #(double, default: 0.025) The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.02 #The step size, in radians, to take between angular samples on a given trajectory
  vx_samples: 6 #(integer, default: 3) The number of samples to use when exploring the x velocity space 
  vtheta_samples: 20 #(integer, default: 20) The number of samples to use when exploring the theta velocity space 
  controller_frequency: 20.0 #(double, default: 20.0) The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset

  # Trajectory Scoring Parameters
  meter_scoring: true #(bool, default: false) Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default
  pdist_scale: 0.3 # (double, default: 0.6) The weighting for how much the controller should stay close to the path it was given 
  gdist_scale: 0.4 # (double, default: 0.8) The weighting for how much the controller should attempt to reach its local goal, also controls speed 
  occdist_scale: 0.001 # (double, default: 0.01) The weighting for how much the controller should attempt to avoid obstacles 

  heading_lookahead: 0.425 #(double, default: 0.325) How far to look ahead in meters when scoring in different in-place-rotation trajectories
  heading_scoring: false #(bool, default: false) Whether to score based on the robot's heading to the path or its distance from the path 
  heading_scoring_timestep: 0.8 #(double, default: 0.8) How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  dwa: true #whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  publish_cost_grid_pc: false #(bool, default: false) Whether or not to publish the cost grid that the planner will use when planning.
  simple_attractor: false

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.25 #(double, default: 0.05) How far the robot must travel in meters befor oscillation flags are reset
  escape_reset_dist: 0.1
  escape_reset_theta: 0.1

DWAPlannerROS:
# Robot configuration parameters
  acc_lim_x: 0.6 #(double, default: 2.5) The x acceleration limit of the robot in meters/sec^2 
  acc_lim_y: 0.6 #(double, default: 2.5) The y acceleration limit of the robot in meters/sec^2 
  acc_lim_theta: 0.8 #(double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2 

  max_vel_x: 0.3 #(double, default: 0.55) The maximum x velocity for the robot in m/s. 
  min_vel_x: 0.05 # (double, default: 0.0) The minimum x velocity for the robot in m/s, negative for backwards motion. 
  max_vel_y: 0 #(double, default: 0.1) The maximum y velocity for the robot in m/s 
  min_vel_y: 0 #(double, default: -0.1) The minimum y velocity for the robot in m/s 

  max_trans_vel: 0.25 #(double, default: 0.55) The absolute value of the maximum translational velocity for the robot in m/s 
  min_trans_vel: 0.1 #(double, default: 0.1) The absolute value of the minimum translational velocity for the robot in m/s 
  max_rot_vel: 0.25 #(double, default: 1.0) The absolute value of the maximum rotational velocity for the robot in rad/s 
  min_rot_vel: 0.2 #(double, default: 0.4) The absolute value of the minimum rotational velocity for the robot in rad/s 

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1 #(double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal 
  xy_goal_tolerance: 0.2 #(double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal 
  latch_xy_goal_tolerance: false #(bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. 
